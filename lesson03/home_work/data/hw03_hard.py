# Задание-1:
# Написать программу, выполняющую операции (сложение и вычитание) с простыми дробями.
# Дроби вводятся и выводятся в формате:
# n x/y ,где n - целая часть, x - числитель, у - знаменатель.
# Дроби могут быть отрицательные и не иметь целой части, или иметь только целую часть.
# Примеры:
# Ввод: 5/6 + 4/7 (всё выражение вводится целиком в виде строки)
# Вывод: 1 17/42  (результат обязательно упростить и выделить целую часть)
# Ввод: -2/3 - -2
# Вывод: 1 1/3

#from fractions import Fraction

from math import gcd

n1, d1 = map(int, input().split('/'))
n2, d2 = map(int, input().split('/'))

if d1 == d2:
    print('{}/{}'.format(n1 + n2, d1))
else:
    cd = int(d1 * d2 / gcd(d1, d2))
    rn = int(cd / d1 * n1 + cd / d2 * n2)
    g2 = gcd(rn, cd)
    n = int(rn / g2)
    d = int(cd / g2)
    print('{}/{}'.format(n, d) if n != d else n)

# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"

fio_lih = {} # ведомость фио и сколько часов отработанно
rate = 200 # расценка
n = int(input('Введите количество работников'))
norm = int(input('Введите норму выробатки часов рабочего за месяц'))
for i in range(n):
    fio = str(input('Введите фамилию {} - го работника'.format(i + 1)))
    sum_hours = int(input('Сколко часов отработал {} :'.format(fio)))
    fio_lih[fio] = sum_hours # ведомость фио и отработанных часов в виде словаря
with open('data_hours.txt', 'w') as data_hours: # записали ведомость фио:отработанные часы в файл
 for fio, sum_hours in fio_lih.items():
  data_hours.write('{}:{}\n'.format(fio, sum_hours))

fio_zp = {} # зарплатная ведомость фио:зарплата
with open('data_hours.txt') as data_hours: #открыли файл ведомость фио и отработанных часов
    for k in data_hours.readlines(): # перебрали в файле по строчно
        fio, sum_hours = k.strip().split(':') # вывели пару фио:отработанных часов
        zp = int
        if int(sum_hours) == norm: # проверили по условиям и вычислили зп
            zp = norm * rate
        if int(sum_hours) > norm:
            zp = (norm * rate) + (int(sum_hours) - norm) * rate * 2
        if int(sum_hours) < norm:
            zp = int(sum_hours) * rate
        fio_zp[fio] = zp # создали зарплатную ведомасть рабочих фио:зп

with open('data_workers.txt', 'w') as data_workers: # записали ведомость в файл в виде фио:зп
 for fio, zp in fio_zp.items():
     data_workers.write('{}:{}\n'.format(fio,zp))

# Задание-3:
# Дан файл ("data/fruits") со списком фруктов.
# Записать в новые файлы все фрукты, начинающиеся с определенной буквы.
# Т.е. в одном файле будут все фрукты на букву “А”, во втором на “Б” и т.д.
# Файлы назвать соответственно.
# Пример имен файлов: fruits_А, fruits_Б, fruits_В ….
# Важно! Обратите внимание, что нет фруктов, начинающихся с некоторых букв.
# Напишите универсальный код, который будет работать с любым списком фруктов
# и распределять по файлам в зависимости от первых букв, имеющихся в списке фруктов.
# Подсказка:
# Чтобы получить список больших букв русского алфавита:
# print(list(map(chr, range(ord('А'), ord('Я')+1))))

list_letters = (list(map(chr, range(ord('А'), ord('Я')+1))))
fr_list = []
with open('fruits.txt') as fr: #открываем список фруктов
    for i in fr.readlines():#читаем построчно
        str = i.rstrip() #далее убираем \n пробелы  
        if str != '':
            fr_list.append(str)#создаём список фруктов
#далее будем сравнивать первую букву слова (она заглавная) с алфавитом
for j in fr_list:#берём первое значение в спсске виде 'Aбрикос' 
    for k in list_letters:#бежим по списку букв вида 'A'
        if j[0] == k:# тут условие проверяется следующее - у слова 'Aбрикос' взяли первый символ 'A'
            name_f = ('frut_{}'.format(j[0])) + '.txt' 
            name = 'frut_{}'.format(j[0])
            with open(name_f, 'a') as name:
                name.write('{}\n'.format(j))












